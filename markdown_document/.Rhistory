Månad = recode(Månad_no,
'01' = "Januari",
'02' = "Februari",
'03' = "Mars",
'04' = "April",
'05' = "Maj",
'06' = "Juni",
'07' = "Juli",
'08' = "Augusti",
'09' = "September",
'10' = "Oktober",
'11' = "November",
'12' = "December")
) %>%
group_by(År, Månad, Månad_no) %>%
summarise('Antal respondenter' = n()) %>%
arrange(Månad_no) %>%
select(-Månad_no) %>%
ungroup()
fran <- paste(slice(resp_over_tid,1)$Månad,slice(resp_over_tid,1)$År)
till <- paste(slice(resp_over_tid,nrow(resp_over_tid))$Månad,slice(resp_over_tid,nrow(resp_over_tid))$År)
num_trips_per_pers <- rvu %>%
select(respondentid) %>%
group_by(respondentid) %>%
summarize(num_trips = n())
befolkning_per_område <- pers %>%
select(respondentid, kon) %>%
left_join(num_trips_per_pers, by = c("respondentid" = "respondentid")) %>%
filter(!is.na(num_trips)) %>%
left_join(respondent2omrade, by = c("respondentid" = "respondentid")) %>%
group_by(Omrade,Omrade_kod) %>%
summarize() %>%
left_join(scb_befolkning, by = c("Omrade_kod" = "Omrade_kod"))
vars <- c("Antal personer", "Resor per dag och person")
num_trips_gender <- pers %>%
select(respondentid, kon) %>%
left_join(num_trips_per_pers, by = c("respondentid" = "respondentid")) %>%
group_by(kon) %>%
summarize("Andel personer som rest (%)" = 100*sum(!is.na(num_trips)) / n(),
"Resor per dag och person" = sum(num_trips, na.rm = TRUE) / n(),
"Resor per dag och person (enbart de som rest)" = mean(num_trips, na.rm = TRUE)) %>%
rename('Grupp' = kon) %>%
mutate('Befolkning' = c(sum(befolkning_per_område$Kvinnor,na.rm = TRUE),sum(befolkning_per_område$Män,na.rm = TRUE),0),
'Antal resor' = round(.data[["Befolkning"]] * .data[["Resor per dag och person"]])) %>%
filter(Grupp != "Okänt")
num_trips_age <- pers %>%
mutate(alder = ifelse(is.na(alder), "Ej angivet", alder)) %>%
select(respondentid, alder) %>%
left_join(num_trips_per_pers, by = c("respondentid" = "respondentid")) %>%
group_by(alder = cut(alder, breaks = c(12, 24, 64, 150))) %>%
summarize("Andel personer som rest (%)" = 100*sum(!is.na(num_trips)) / n(),
"Resor per dag och person" = sum(num_trips, na.rm = TRUE) / n(),
"Resor per dag och person (enbart de som rest)" = mean(num_trips, na.rm = TRUE),
"Antal_observationer" = n()) %>%
mutate(alder = c("15–24 år", "25–64 år", "65–85 år")) %>%
rename('Grupp' = alder) %>%
mutate('Befolkning' = c(sum(befolkning_per_område$Ålder_15_19,na.rm = TRUE)+sum(befolkning_per_område$Ålder_20_24,na.rm = TRUE),
sum(befolkning_per_område$Ålder_25_39,na.rm = TRUE)+sum(befolkning_per_område$Ålder_40_64,na.rm = TRUE),
sum(befolkning_per_område$Ålder_65_74,na.rm = TRUE)+sum(befolkning_per_område$Ålder_75,na.rm = TRUE)),
'Antal resor' = round(.data[["Befolkning"]] * .data[["Resor per dag och person"]]))
alder_3gr_lagt_underlag <- filter(num_trips_age,Antal_observationer < lagt_underlag)
num_trips_age <- num_trips_age %>%
select(-Antal_observationer)
num_trips_age_tabell <- num_trips_age %>%
mutate(Grupp = ifelse(Grupp %in% alder_3gr_lagt_underlag$Grupp,paste0(Grupp,"*"),Grupp))
num_trips_all <- pers %>%
select(respondentid) %>%
left_join(num_trips_per_pers, by = c("respondentid" = "respondentid")) %>%
#group_by(kon) %>%
summarize("Andel personer som rest (%)" = 100*sum(!is.na(num_trips)) / n(),
"Resor per dag och person" = sum(num_trips, na.rm = TRUE) / n(),
"Resor per dag och person (enbart de som rest)" = mean(num_trips, na.rm = TRUE)) %>%
mutate('Grupp' = "Alla",
'Befolkning' = sum(befolkning_per_område$Befolkning,na.rm = TRUE),
'Antal resor' = round(.data[["Befolkning"]] * .data[["Resor per dag och person"]]))
num_trips_rep <- num_trips_gender %>%
rbind(num_trips_age_tabell) %>%
rbind(num_trips_all)
resor_per_dag_man <- format(round(num_trips_gender[num_trips_gender$Grupp=="Man",]$`Resor per dag och person`, digits = 1), nsmall = 1)
resor_per_dag_kvinna <- format(round(num_trips_gender[num_trips_gender$Grupp=="Kvinna",]$`Resor per dag och person`, digits = 1), nsmall = 1)
#Följande används i diagrammen nedan, samt till fardmedelsfordelning-km-diagram i resultat-delen
#Filtrerar data
reslangd <- rvu %>%
filter(!is.na(avstand)) %>%
rename(Färdmedel = fardmedel.kat) %>%
select(respondentid,Färdmedel,avstand,Omrade,Omrade_kod)
#Räknar ut hur många individer som gör resor per område
antal_resande_individer <- rvu %>%
group_by(Omrade) %>%
summarise("Antal_resande_individer" = n_distinct(respondentid))
#Räknar ut hur många individer som inte gör någon resa
individer_utan_resa <- pers %>% #OBS i dagsläget saknar alla individer utan resa också område...
group_by(Omrade) %>%
summarise("Antal_individer" = n_distinct(respondentid)) %>%
left_join(antal_resande_individer, by = c("Omrade" = "Omrade")) %>%
mutate(Individer_utan_resa = Antal_individer-Antal_resande_individer) %>%
select(Omrade,Individer_utan_resa)
#Räknar ut hur många individer det finns per område
individer_per_område <- reslangd %>%
group_by(Omrade) %>%
summarise("Antal_individer" = n_distinct(respondentid)) %>%
left_join(individer_utan_resa, by = c("Omrade" = "Omrade")) %>%
mutate(Antal_individer = Antal_individer+Individer_utan_resa) %>%
select(Omrade,Antal_individer)
#Antal resor per individ (och område, färdmedel) räknas ut
resor_per_individ <- reslangd %>% #Resor per individ blir överskattat pga fel med att individer utan resa saknar bostadsort
group_by(Omrade,Omrade_kod,Färdmedel) %>%
summarise("Antal_observationer" = n(), .groups = 'drop') %>%
left_join(individer_per_område, by = c("Omrade" = "Omrade")) %>%
mutate(Resor_per_individ = Antal_observationer/Antal_individer) %>%
left_join(select(scb_befolkning, c(Omrade_kod,Befolkning)), by = c("Omrade_kod" = "Omrade_kod")) %>%
mutate(Totalt_antal_resor = Befolkning*Resor_per_individ) %>%
ungroup() %>%
select(Omrade,Färdmedel,Totalt_antal_resor)
#Antal resor per individ (färdmedel) räknas ut
resor_per_individ_summa <- resor_per_individ %>%
group_by(Färdmedel) %>%
summarise("Totalt_antal_resor" = round(sum(Totalt_antal_resor,na.rm = TRUE),0)) %>%
arrange(desc(Totalt_antal_resor)) %>%
mutate(Perc_resor = Totalt_antal_resor / sum(Totalt_antal_resor))
#Här definieras den globala parametern som bestämmer ordning på färdmedel i alla diagram
ordning_fardmedel <- resor_per_individ_summa$Färdmedel
ordning_fardmedel <- append(ordning_fardmedel,"Annat") #Lägg till Annat på slutet
if (match("Tåg",ordning_fardmedel)<match("Buss",ordning_fardmedel)) { #Om tåg före buss
ordning_fardmedel <- ordning_fardmedel[ordning_fardmedel != "Buss"] #Ta bort Buss
ordning_fardmedel <- append(ordning_fardmedel,"Buss",match("Tåg",ordning_fardmedel)) #Lägg till buss efter tåg
} else {
ordning_fardmedel <- ordning_fardmedel[ordning_fardmedel != "Tåg"] #Ta bort Tåg
ordning_fardmedel <- append(ordning_fardmedel,"Tåg",match("Buss",ordning_fardmedel)) #Lägg till tåg efter buss
}
#Räknar ut totalt per färdmedel
reslangd_summa <- reslangd %>%
# as.data.frame() %>%
# `rownames<-`(.[,1])  %>% #skapar indexkolumn
# select(!(Omrade))  %>%
group_by(Färdmedel) %>%
summarise("Median" = round(median(avstand),0), "Medel" = round(mean(avstand),1), "Antal_observationer" = n()) %>%
mutate(Omrade = c("Alla")) %>%
left_join(resor_per_individ_summa, by = c("Färdmedel" = "Färdmedel")) %>%
select(-Perc_resor) %>%
mutate(Trafikarbete_totalt = Totalt_antal_resor*Medel) %>%
arrange(desc(Totalt_antal_resor))
#Räknar ut totalt
reslangd_summa_tot <- reslangd %>%
summarise("Median" = round(median(avstand),0), "Medel" = round(mean(avstand),1), "Antal_observationer" = n()) %>%
cbind(Färdmedel = "Alla") %>%
cbind(Omrade = "Totalt") %>%
mutate(Totalt_antal_resor = sum(resor_per_individ$Totalt_antal_resor,na.rm = TRUE)) %>%
mutate(Trafikarbete_totalt = Totalt_antal_resor*Medel)
#Antal resor per individ (och område, färdmedel) räknas ut
resor_per_omrade_fardmedel <- reslangd %>% #Resor per individ blir överskattat pga fel med att individer utan resa saknar bostadsort
group_by(Omrade,Omrade_kod) %>%
summarise("Antal_observationer" = n(), .groups = 'drop') %>%
left_join(individer_per_område, by = c("Omrade" = "Omrade")) %>%
mutate(Resor_per_individ = Antal_observationer/Antal_individer) %>%
left_join(select(scb_befolkning, c(Omrade_kod,Befolkning)), by = c("Omrade_kod" = "Omrade_kod")) %>%
mutate(Totalt_antal_resor = Befolkning*Resor_per_individ) %>%
ungroup() %>%
select(Omrade,Totalt_antal_resor)
#Skapar kolumner med median, medel osv.
reslangd_per_omrade <- reslangd %>%
select(-one_of("Omrade_kod")) %>%
group_by(Omrade) %>% #`summarise()` has grouped output by 'Omrade'. You can override using the `.groups` argument.???
summarise("Median" = round(median(avstand),0), "Medel" = round(mean(avstand),1), "Antal_observationer" = n()) %>%
left_join(resor_per_omrade_fardmedel, by = c("Omrade" = "Omrade")) %>%
mutate(Trafikarbete_totalt = Totalt_antal_resor*Medel)
#Antalet observationer som krävs för att data ska visas (global parameter)
tillräckligt_underlag <- 5
reslangd_per_omrade <- reslangd_per_omrade %>%
mutate(
Omrade = ifelse(is.na(Omrade), "Ej angivet", Omrade),
Median = ifelse(is.na(Median), "-", round(Median/1000)),
Medel = ifelse(is.na(Medel), "-", round(Medel/1000)),
"Totalt antal resor" = ifelse(is.na(Totalt_antal_resor), "-", round(Totalt_antal_resor/100)*100),
"Totalt antal fordonskilometer" = ifelse(is.na(Trafikarbete_totalt), "-", round(Trafikarbete_totalt/1000)),
"Antal observationer" = ifelse(is.na(Antal_observationer), 0, Antal_observationer)
) %>%
select(-Antal_observationer,-Totalt_antal_resor,-Trafikarbete_totalt) %>%
rename(Område = Omrade)
reslangd_per_omrade_tabell <- reslangd_per_omrade %>%
mutate(Område = ifelse(Område %in% omraden_lagt_underlag$Omrade,paste0(Område,"*"),Område))
reslangd_summa_ny <- reslangd_summa %>%
mutate(
Färdmedel = ifelse(is.na(Färdmedel), "Ej angivet", Färdmedel),
Median = ifelse(is.na(Median), "-", round(Median/1000)),
Medel = ifelse(is.na(Medel), "-", round(Medel/1000)),
"Totalt antal resor" = ifelse(is.na(Totalt_antal_resor), "-", round(Totalt_antal_resor/100)*100),
"Totalt antal fordonskilometer" = ifelse(is.na(Trafikarbete_totalt), "-", round(Trafikarbete_totalt/1000)),
"Antal observationer" = ifelse(is.na(Antal_observationer), 0, Antal_observationer)
) %>%
select(-Antal_observationer,-Totalt_antal_resor,-Trafikarbete_totalt,-Omrade)
rvu_avs <- rvu %>%
filter(!is.na(avstand)&avstand>0) %>%
rename(Färdmedel = fardmedel.kat) %>%
select(respondentid,Färdmedel,avstand,Omrade,Omrade_kod)
rvu_avs$km <- round(rvu_avs$avstand/1000)
rvu_avs <- rvu_avs %>%
group_by(kmklass = cut(km, breaks = c(0, 2, 5, 10, 25, 50, 1000)))
#rvu_avs$kmklass<-ifelse(rvu_avs$km>32/4,32,rvu_avs$km*4)
rvu_avs$antal<-1
#Aggregerar avståndsklasser
agg_rvu_avs <-
aggregate(rvu_avs[,c('antal'), drop=FALSE], by=list(
avstand = rvu_avs$kmklass,
fard = rvu_avs$Färdmedel
),
FUN = sum)
agg_rvu_avs<-spread(agg_rvu_avs,key=fard,value=antal)
agg_rvu_avs[is.na(agg_rvu_avs)]<-0
agg_rvu_avs$Totalt<-agg_rvu_avs$Bil+agg_rvu_avs$Buss+agg_rvu_avs$Tåg+agg_rvu_avs$Cykel+agg_rvu_avs$Gång
agg_rvu_avs <- agg_rvu_avs[c("avstand","Bil","Tåg","Buss","Cykel","Gång","Totalt")]
agg_rvu_avs <- mutate(agg_rvu_avs,avstand = c(
"0–2",
"2–5",
"5–10",
"10–25",
"25–50",
"50+"
))
#Följande kod används i sammanfattning och i resultatdelens kapitel Resornas fördelning på färdsätt
trip_mode <- rvu %>%
# left_join(select(pers, c("respondentid")), by = c("respondentid" = "respondentid")) %>% #Hämtar kolumn från pers-data
select(Omrade, Omrade_kod, fardmedel.kat) %>%
filter(!is.na(fardmedel.kat)) %>%
group_by(Omrade,Omrade_kod,fardmedel.kat) %>%
summarize(antal = n()) %>%
spread(fardmedel.kat, antal, fill=0) %>%
mutate(Totalt = rowSums(across(where(is.numeric)))) %>%
#Räknar ut radsummor
ungroup() %>%
left_join(select(scb_befolkning, c(Omrade_kod,Befolkning)), by = c("Omrade_kod" = "Omrade_kod")) %>%
bind_rows(summarize(.,
across(where(is.numeric), sum),
across(where(is.character), ~ "Totalt"))) %>% #Skapar totalrad
mutate(across(where(is.numeric) & !Befolkning, ~ . / Totalt)) %>% #dividerar till procent av respondenter
select(Omrade,ordning_fardmedel,Befolkning) %>%
rename(Område = Omrade)
trip_mode_percent <- trip_mode %>%
select(!Befolkning) %>%
mutate(across(where(is.numeric), ~percent(.x, accuracy = 1))) %>%
mutate(Område = ifelse(Område %in% omraden_lagt_underlag$Omrade,paste0(Område,"*"),Område))
trip_mode_abs <- trip_mode %>%
mutate(across(where(is.numeric) & !Befolkning, ~ round(. * Befolkning)),
Totalt = Befolkning) %>%
select(!Befolkning) %>%
mutate(Område = ifelse(Område %in% omraden_lagt_underlag$Omrade,paste0(Område,"*"),Område))
#Text produceras för färdmedelsfördelningen nedan i sammanfattningen, samt till resultatdelens avsnitt Reslängd och fordonskilometer
#Mest frekventa färdmedel map fordonskilometer
mest_frekvent_fardmedel_km <- reslangd_summa$Färdmedel[which.max(reslangd_summa$Trafikarbete_totalt)]
mest_frekvent_fardmedel_km_varde <- max(reslangd_summa$Trafikarbete_totalt)
mest_frekvent_fardmedel_km_andel <- mest_frekvent_fardmedel_km_varde/sum(reslangd_summa$Trafikarbete_totalt)
#Längst eller kortast median
langst_resor_fardmedel <- reslangd_summa$Färdmedel[which.max(reslangd_summa$Median)]
langst_resor_fardmedel_varde <- max(reslangd_summa$Median)
kortast_resor_fardmedel <- reslangd_summa$Färdmedel[which.min(reslangd_summa$Median)]
kortast_resor_fardmedel_varde <- min(reslangd_summa$Median)
#Transformerar till dataframe
trip_person_mode_max <- trip_mode %>%
as.data.frame() %>%
`rownames<-`(.[,1])  %>% #skapar indexkolumn
select(!(Område))  %>%
select(!(Befolkning))
View(trip_mode)
rvu <- read_delim(paste0(sokvag,"rvu_håbo2021.csv"), ";", escape_double = FALSE,
locale = locale(encoding = "ISO-8859-1"),
trim_ws = TRUE)
pers <- read_delim(paste0(sokvag,"person_håbo2021.csv"), ";", escape_double = FALSE,
locale = locale(encoding = "ISO-8859-1"),
trim_ws = TRUE)
avst <- read_delim(paste0(sokvag,"restid_region2021.csv"), ";", escape_double = FALSE,
locale = locale(encoding = "ISO-8859-1"),
trim_ws = TRUE) %>%
select(respondentid, resa_nr, distance_straight_line, distance_google)
rvu <- read_delim(paste0(sokvag,"rvu_håbo2021.csv"), ";", escape_double = FALSE,
locale = locale(encoding = "ISO-8859-1"),
trim_ws = TRUE)
pers <- read_delim(paste0(sokvag,"person_håbo2021.csv"), ";", escape_double = FALSE,
locale = locale(encoding = "ISO-8859-1"),
trim_ws = TRUE)
avst <- read_delim(paste0(sokvag,"restid_region2021.csv"), ";", escape_double = FALSE,
locale = locale(encoding = "ISO-8859-1"),
trim_ws = TRUE) %>%
select(respondentid, resa_nr, distance_straight_line, distance_google)
#Bestämmer vilken bostadsinfo som ska användas beroende på rapportnivå...
pers <- mutate(pers,Omrade = as.character(.data[[paste("bostad_",omradesniva,"_namn",sep="")]]))
pers <- mutate(pers,Omrade_kod = as.character(.data[[paste("bostad_",omradesniva,"_kod",sep="")]]))
rvu <- mutate(rvu,start_omrade_namn = as.character(.data[[paste("start_",omradesniva,"_namn",sep="")]]))
rvu <- mutate(rvu,stop_omrade_namn = as.character(.data[[paste("stop_",omradesniva,"_namn",sep="")]]))
View(pers)
omradesniva
pers <- mutate(pers,Rapportomrade = .data[[paste("bostad_",rapportniva,"_namn",sep="")]])
#pers <- mutate(pers,Rapportomrade_kod = .data[[paste("bostad_",rapportniva,"_kod",sep="")]])
rvu <- mutate(rvu,start_rapportomrade_namn = .data[[paste("start_",rapportniva,"_namn",sep="")]])
rvu <- mutate(rvu,stop_rapportomrade_namn = .data[[paste("stop_",rapportniva,"_namn",sep="")]])
#Filter för att begränsa till perioden
pers <- pers %>%
filter(ar.manad >= starttid & ar.manad <= sluttid)
#Fixar rapportområdet
#Filter för att begränsa till rapportområdet
pers <- pers %>%
filter(Rapportomrade %in% rapportomrade)
rvu <- rvu %>%
filter(respondentid %in% pers$respondentid)
avst <- avst %>%
filter(respondentid %in% pers$respondentid)
#Räknar ut hur många områden som har för lågt underlag
omraden_lagt_underlag <- pers %>%
mutate(Omrade = ifelse(is.na(Omrade), "Ej angivet", Omrade)) %>%
group_by(Omrade) %>%
summarize(Respondenter = n()) %>%
filter(Respondenter<lagt_underlag) %>%
select(Omrade)
#Sätter asterisk på områden med för lågt underlag
# pers <- pers %>%
#   mutate(Omrade = ifelse(Omrade %in% omraden_lagt_underlag$Omrade,paste0(Omrade,"*"),Omrade))
#joina avstånd till resor
rvu <- rvu %>%
left_join(avst, by = c("respondentid", "resa_nr")) %>%
mutate(avstand = distance_google) %>%
mutate(fardmedel.kat = ifelse(fardmedel.kat == "Kollektiv_buss","Buss",fardmedel.kat)) %>%
mutate(fardmedel.kat = ifelse(fardmedel.kat == "Kollektiv_tåg","Tåg",fardmedel.kat))
#Vilka tätorter och kommuner som rapporten innefattar
tatorter <- unique(pers$bostad_tatort_namn)
kommuner <- unique(pers$bostad_kommun_namn)
tatorter
kommuner
rvu <- read_delim(paste0(sokvag,"rvu_håbo2021.csv"), ";", escape_double = FALSE,
locale = locale(encoding = "ISO-8859-1"),
trim_ws = TRUE)
pers <- read_delim(paste0(sokvag,"person_håbo2021.csv"), ";", escape_double = FALSE,
locale = locale(encoding = "ISO-8859-1"),
trim_ws = TRUE)
avst <- read_delim(paste0(sokvag,"restid_region2021.csv"), ";", escape_double = FALSE,
locale = locale(encoding = "ISO-8859-1"),
trim_ws = TRUE) %>%
select(respondentid, resa_nr, distance_straight_line, distance_google)
#Bestämmer vilken bostadsinfo som ska användas beroende på rapportnivå...
pers <- mutate(pers,Omrade = as.character(.data[[paste("bostad_",omradesniva,"_namn",sep="")]]))
pers <- mutate(pers,Omrade_kod = as.character(.data[[paste("bostad_",omradesniva,"_kod",sep="")]]))
rvu <- mutate(rvu,start_omrade_namn = as.character(.data[[paste("start_",omradesniva,"_namn",sep="")]]))
rvu <- mutate(rvu,stop_omrade_namn = as.character(.data[[paste("stop_",omradesniva,"_namn",sep="")]]))
pers <- mutate(pers,Rapportomrade = .data[[paste("bostad_",rapportniva,"_namn",sep="")]])
#pers <- mutate(pers,Rapportomrade_kod = .data[[paste("bostad_",rapportniva,"_kod",sep="")]])
rvu <- mutate(rvu,start_rapportomrade_namn = .data[[paste("start_",rapportniva,"_namn",sep="")]])
rvu <- mutate(rvu,stop_rapportomrade_namn = .data[[paste("stop_",rapportniva,"_namn",sep="")]])
#Filter för att begränsa till perioden
pers <- pers %>%
filter(ar.manad >= starttid & ar.manad <= sluttid)
#Fixar rapportområdet
#Filter för att begränsa till rapportområdet
pers <- pers %>%
filter(Rapportomrade %in% rapportomrade)
rvu <- rvu %>%
filter(respondentid %in% pers$respondentid)
avst <- avst %>%
filter(respondentid %in% pers$respondentid)
#Räknar ut hur många områden som har för lågt underlag
omraden_lagt_underlag <- pers %>%
mutate(Omrade = ifelse(is.na(Omrade), "Ej angivet", Omrade)) %>%
group_by(Omrade) %>%
summarize(Respondenter = n()) %>%
filter(Respondenter<lagt_underlag) %>%
select(Omrade)
#Sätter asterisk på områden med för lågt underlag
# pers <- pers %>%
#   mutate(Omrade = ifelse(Omrade %in% omraden_lagt_underlag$Omrade,paste0(Omrade,"*"),Omrade))
#joina avstånd till resor
rvu <- rvu %>%
left_join(avst, by = c("respondentid", "resa_nr")) %>%
mutate(avstand = distance_google) %>%
mutate(fardmedel.kat = ifelse(fardmedel.kat == "Kollektiv_buss","Buss",fardmedel.kat)) %>%
mutate(fardmedel.kat = ifelse(fardmedel.kat == "Kollektiv_tåg","Tåg",fardmedel.kat))
#Vilka tätorter och kommuner som rapporten innefattar
tatorter <- unique(pers$bostad_tatort_namn)
kommuner <- unique(pers$bostad_kommun_namn)
#textvariabler till textstycke
if (omradesniva == 'deso')
omradesniva_text <- 'DeSO'
omradesniva_text_plural <- 'DeSO-områden'
if (omradesniva == 'tatort')
omradesniva_text <- 'tätort'
omradesniva_text_plural <- 'tätorter'
if (omradesniva == 'kommun')
omradesniva_text <- 'kommun'
omradesniva_text_plural <- 'kommuner'
View(rvu)
View(respondent2omrade)
View(scb_befolkning)
#ett viktad medelvärde för året då RVU genomfördes för att få rätt befolkningsdata från SCB API
rvu_yr <- pers %>% group_by(ar) %>% summarise(resp_in_year = n()) %>%
summarise(avg_year = weighted.mean(ar, resp_in_year)) %>%
round() %>% as.character()
#Om fel, väljs ett tidigare år:
#rvu_yr <- as.character(as.numeric(rvu_yr)-1) # flag: ta bort
scb_data_last_year <- pxweb_get(table_api_address)$variables[5][[1]]$values %>% rev()
#Getting the latest year if the RVU year not in the SCB table
if(!(as.numeric(rvu_yr) %in% scb_data_last_year)){
rvu_yr <- scb_data_last_year[1]
}
pxweb_query_list <-
list("Region"=c('*'), # Use "*" to select all
"Alder" = c('15-19','20-24','25-29','30-34','35-39','40-44','45-49','50-54','55-59','60-64','65-69','70-74','75-79','80-'),
"Kon"=c('1','2'), #1:man, 2:kvinna
"ContentsCode"=c('000005FF'), #table name in SCB webpage
"Tid"=c(rvu_yr))
px_query <- pxweb_query(pxweb_query_list)
px_data <- pxweb_get(table_api_address,
px_query)
scb_befolkning <- as.data.frame(px_data, column.name.type = "text", variable.value.type = "text") %>%
#kolumnerna ska heta: region (chr), citizenship (chr), sex (chr), year (chr), Population per region (chr) %>%
mutate(region = str_trim(region, side = "left")) %>% #removing blank character
rename(Omrade_kod = region,
Ålder = age,
Kön = sex,
Befolkning = "Population per region") %>%
select(Omrade_kod, Ålder, Kön, Befolkning)
scb_befolkning <- scb_befolkning %>%
mutate(Män = ifelse(Kön == "men", Befolkning, 0),
Kvinnor = ifelse(Kön == "women", Befolkning, 0),
Ålder_15_19 = ifelse(strtoi(str_sub(Ålder,1,2)) < 20, Befolkning, 0),
Ålder_20_24 = ifelse(strtoi(str_sub(Ålder,1,2)) < 25, Befolkning, 0),
Ålder_25_39 = ifelse(strtoi(str_sub(Ålder,1,2)) > 20 & strtoi(str_sub(Ålder,1,2)) < 40, Befolkning, 0),
Ålder_40_64 = ifelse(strtoi(str_sub(Ålder,1,2)) < 35 & strtoi(str_sub(Ålder,1,2)) < 65, Befolkning, 0),
Ålder_65_74 = ifelse(strtoi(str_sub(Ålder,1,2)) > 60 & strtoi(str_sub(Ålder,1,2)) < 75, Befolkning, 0),
Ålder_75 = ifelse(strtoi(str_sub(Ålder,1,2)) > 75, Befolkning, 0)) %>%
group_by(Omrade_kod) %>%
summarise(Befolkning = sum(Befolkning), Män = sum(Män), Kvinnor = sum(Kvinnor), "Ålder_15_19" = sum(Ålder_15_19), "Ålder_20_24" = sum(Ålder_20_24), "Ålder_25_39" = sum(Ålder_25_39), "Ålder_40_64" = sum(Ålder_40_64), "Ålder_65_74" = sum(Ålder_65_74), "Ålder_75" = sum(Ålder_75))
scb_befolkning <- scb_befolkning %>%
mutate(Omrade_kod = ifelse(is.na(as.numeric(sapply(strsplit(Omrade_kod, " "), "[[", 1))),Omrade_kod,as.numeric(sapply(strsplit(Omrade_kod, " "), "[[", 1))))
#Konverterar kommuner till kommunkoder
respondent2omrade <- pers %>%
select(respondentid, Omrade, Omrade_kod) %>%
left_join(scb_befolkning, by = c("Omrade_kod" = "Omrade_kod"))
rvu <- rvu %>%
left_join(select(respondent2omrade, c(respondentid,Omrade,Omrade_kod)), by = c("respondentid" = "respondentid"))
rvu <- read_delim(paste0(sokvag,"rvu_håbo2021.csv"), ";", escape_double = FALSE,
locale = locale(encoding = "ISO-8859-1"),
trim_ws = TRUE)
pers <- read_delim(paste0(sokvag,"person_håbo2021.csv"), ";", escape_double = FALSE,
locale = locale(encoding = "ISO-8859-1"),
trim_ws = TRUE)
avst <- read_delim(paste0(sokvag,"restid_håbo2021.csv"), ";", escape_double = FALSE,
locale = locale(encoding = "ISO-8859-1"),
trim_ws = TRUE) %>%
select(respondentid, resa_nr, distance_straight_line, distance_google)
#Bestämmer vilken bostadsinfo som ska användas beroende på rapportnivå...
pers <- mutate(pers,Omrade = as.character(.data[[paste("bostad_",omradesniva,"_namn",sep="")]]))
pers <- mutate(pers,Omrade_kod = as.character(.data[[paste("bostad_",omradesniva,"_kod",sep="")]]))
rvu <- mutate(rvu,start_omrade_namn = as.character(.data[[paste("start_",omradesniva,"_namn",sep="")]]))
rvu <- mutate(rvu,stop_omrade_namn = as.character(.data[[paste("stop_",omradesniva,"_namn",sep="")]]))
pers <- mutate(pers,Rapportomrade = .data[[paste("bostad_",rapportniva,"_namn",sep="")]])
#pers <- mutate(pers,Rapportomrade_kod = .data[[paste("bostad_",rapportniva,"_kod",sep="")]])
rvu <- mutate(rvu,start_rapportomrade_namn = .data[[paste("start_",rapportniva,"_namn",sep="")]])
rvu <- mutate(rvu,stop_rapportomrade_namn = .data[[paste("stop_",rapportniva,"_namn",sep="")]])
#Filter för att begränsa till perioden
pers <- pers %>%
filter(ar.manad >= starttid & ar.manad <= sluttid)
#Fixar rapportområdet
#Filter för att begränsa till rapportområdet
pers <- pers %>%
filter(Rapportomrade %in% rapportomrade)
rvu <- rvu %>%
filter(respondentid %in% pers$respondentid)
avst <- avst %>%
filter(respondentid %in% pers$respondentid)
#Räknar ut hur många områden som har för lågt underlag
omraden_lagt_underlag <- pers %>%
mutate(Omrade = ifelse(is.na(Omrade), "Ej angivet", Omrade)) %>%
group_by(Omrade) %>%
summarize(Respondenter = n()) %>%
filter(Respondenter<lagt_underlag) %>%
select(Omrade)
#Sätter asterisk på områden med för lågt underlag
# pers <- pers %>%
#   mutate(Omrade = ifelse(Omrade %in% omraden_lagt_underlag$Omrade,paste0(Omrade,"*"),Omrade))
#joina avstånd till resor
rvu <- rvu %>%
left_join(avst, by = c("respondentid", "resa_nr")) %>%
mutate(avstand = distance_google) %>%
mutate(fardmedel.kat = ifelse(fardmedel.kat == "Kollektiv_buss","Buss",fardmedel.kat)) %>%
mutate(fardmedel.kat = ifelse(fardmedel.kat == "Kollektiv_tåg","Tåg",fardmedel.kat))
#Vilka tätorter och kommuner som rapporten innefattar
tatorter <- unique(pers$bostad_tatort_namn)
kommuner <- unique(pers$bostad_kommun_namn)
#textvariabler till textstycke
if (omradesniva == 'deso')
omradesniva_text <- 'DeSO'
omradesniva_text_plural <- 'DeSO-områden'
if (omradesniva == 'tatort')
omradesniva_text <- 'tätort'
omradesniva_text_plural <- 'tätorter'
if (omradesniva == 'kommun')
omradesniva_text <- 'kommun'
omradesniva_text_plural <- 'kommuner'
required_packages_list <-  c(
"knitr", "kableExtra", "tidyverse", "readxl", "bookdown", "pxweb", "scales", "stringi", "leaflet", "sf", "mapview", "processx", "tinytex", "jsonlite", "htmltools", "webshot", "jsontools", "farver")
for (pack in required_packages_list){
if(pack %in% installed.packages() == FALSE){install.packages(pack)}
}
lapply(required_packages_list, require, character.only = TRUE)
#update.packages(ask = FALSE, checkBuilt = TRUE, repos = "http://cran.us.r-project.org")
if(is_tinytex() == FALSE){tinytex::install_tinytex()}
tinytex::tlmgr_update()
inline_hook<-function(x){
if(is.numeric(x)){
formatted<-format(x,big.mark = " ")
}
else{
formatted<-x
}
}
gc()
